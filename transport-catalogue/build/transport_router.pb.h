// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_router.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5frouter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5frouter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "graph.pb.h"
#include "svg.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5frouter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5frouter_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5frouter_2eproto;
namespace router_proto {
class ResponsResult;
struct ResponsResultDefaultTypeInternal;
extern ResponsResultDefaultTypeInternal _ResponsResult_default_instance_;
class ResponsRouteData;
struct ResponsRouteDataDefaultTypeInternal;
extern ResponsRouteDataDefaultTypeInternal _ResponsRouteData_default_instance_;
class RouteData;
struct RouteDataDefaultTypeInternal;
extern RouteDataDefaultTypeInternal _RouteData_default_instance_;
class StopsToId;
struct StopsToIdDefaultTypeInternal;
extern StopsToIdDefaultTypeInternal _StopsToId_default_instance_;
}  // namespace router_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::router_proto::ResponsResult* Arena::CreateMaybeMessage<::router_proto::ResponsResult>(Arena*);
template<> ::router_proto::ResponsRouteData* Arena::CreateMaybeMessage<::router_proto::ResponsRouteData>(Arena*);
template<> ::router_proto::RouteData* Arena::CreateMaybeMessage<::router_proto::RouteData>(Arena*);
template<> ::router_proto::StopsToId* Arena::CreateMaybeMessage<::router_proto::StopsToId>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace router_proto {

enum Type : int {
  TYPE_WAIT = 0,
  TYPE_BUS = 1,
  Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Type_IsValid(int value);
constexpr Type Type_MIN = TYPE_WAIT;
constexpr Type Type_MAX = TYPE_BUS;
constexpr int Type_ARRAYSIZE = Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_descriptor();
template<typename T>
inline const std::string& Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Type_descriptor(), enum_t_value);
}
inline bool Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
// ===================================================================

class StopsToId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:router_proto.StopsToId) */ {
 public:
  inline StopsToId() : StopsToId(nullptr) {}
  ~StopsToId() override;
  explicit PROTOBUF_CONSTEXPR StopsToId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopsToId(const StopsToId& from);
  StopsToId(StopsToId&& from) noexcept
    : StopsToId() {
    *this = ::std::move(from);
  }

  inline StopsToId& operator=(const StopsToId& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopsToId& operator=(StopsToId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopsToId& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopsToId* internal_default_instance() {
    return reinterpret_cast<const StopsToId*>(
               &_StopsToId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StopsToId& a, StopsToId& b) {
    a.Swap(&b);
  }
  inline void Swap(StopsToId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopsToId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopsToId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopsToId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopsToId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StopsToId& from) {
    StopsToId::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopsToId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "router_proto.StopsToId";
  }
  protected:
  explicit StopsToId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStpBusFieldNumber = 1,
    kStopIdFieldNumber = 2,
  };
  // string stp_bus = 1;
  void clear_stp_bus();
  const std::string& stp_bus() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stp_bus(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stp_bus();
  PROTOBUF_NODISCARD std::string* release_stp_bus();
  void set_allocated_stp_bus(std::string* stp_bus);
  private:
  const std::string& _internal_stp_bus() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stp_bus(const std::string& value);
  std::string* _internal_mutable_stp_bus();
  public:

  // int32 stop_id = 2;
  void clear_stop_id();
  int32_t stop_id() const;
  void set_stop_id(int32_t value);
  private:
  int32_t _internal_stop_id() const;
  void _internal_set_stop_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:router_proto.StopsToId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stp_bus_;
    int32_t stop_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class ResponsRouteData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:router_proto.ResponsRouteData) */ {
 public:
  inline ResponsRouteData() : ResponsRouteData(nullptr) {}
  ~ResponsRouteData() override;
  explicit PROTOBUF_CONSTEXPR ResponsRouteData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponsRouteData(const ResponsRouteData& from);
  ResponsRouteData(ResponsRouteData&& from) noexcept
    : ResponsRouteData() {
    *this = ::std::move(from);
  }

  inline ResponsRouteData& operator=(const ResponsRouteData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponsRouteData& operator=(ResponsRouteData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponsRouteData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponsRouteData* internal_default_instance() {
    return reinterpret_cast<const ResponsRouteData*>(
               &_ResponsRouteData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ResponsRouteData& a, ResponsRouteData& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponsRouteData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponsRouteData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponsRouteData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponsRouteData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponsRouteData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResponsRouteData& from) {
    ResponsRouteData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponsRouteData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "router_proto.ResponsRouteData";
  }
  protected:
  explicit ResponsRouteData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kTypeFieldNumber = 1,
    kSpanCountFieldNumber = 3,
    kTimeFieldNumber = 4,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .router_proto.Type type = 1;
  void clear_type();
  ::router_proto::Type type() const;
  void set_type(::router_proto::Type value);
  private:
  ::router_proto::Type _internal_type() const;
  void _internal_set_type(::router_proto::Type value);
  public:

  // int32 span_count = 3;
  void clear_span_count();
  int32_t span_count() const;
  void set_span_count(int32_t value);
  private:
  int32_t _internal_span_count() const;
  void _internal_set_span_count(int32_t value);
  public:

  // double time = 4;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:router_proto.ResponsRouteData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int type_;
    int32_t span_count_;
    double time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class ResponsResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:router_proto.ResponsResult) */ {
 public:
  inline ResponsResult() : ResponsResult(nullptr) {}
  ~ResponsResult() override;
  explicit PROTOBUF_CONSTEXPR ResponsResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponsResult(const ResponsResult& from);
  ResponsResult(ResponsResult&& from) noexcept
    : ResponsResult() {
    *this = ::std::move(from);
  }

  inline ResponsResult& operator=(const ResponsResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponsResult& operator=(ResponsResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponsResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponsResult* internal_default_instance() {
    return reinterpret_cast<const ResponsResult*>(
               &_ResponsResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ResponsResult& a, ResponsResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponsResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponsResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponsResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponsResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponsResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResponsResult& from) {
    ResponsResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponsResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "router_proto.ResponsResult";
  }
  protected:
  explicit ResponsResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kRIdFieldNumber = 1,
  };
  // .router_proto.ResponsRouteData data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::router_proto::ResponsRouteData& data() const;
  PROTOBUF_NODISCARD ::router_proto::ResponsRouteData* release_data();
  ::router_proto::ResponsRouteData* mutable_data();
  void set_allocated_data(::router_proto::ResponsRouteData* data);
  private:
  const ::router_proto::ResponsRouteData& _internal_data() const;
  ::router_proto::ResponsRouteData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::router_proto::ResponsRouteData* data);
  ::router_proto::ResponsRouteData* unsafe_arena_release_data();

  // int32 r_id = 1;
  void clear_r_id();
  int32_t r_id() const;
  void set_r_id(int32_t value);
  private:
  int32_t _internal_r_id() const;
  void _internal_set_r_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:router_proto.ResponsResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::router_proto::ResponsRouteData* data_;
    int32_t r_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class RouteData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:router_proto.RouteData) */ {
 public:
  inline RouteData() : RouteData(nullptr) {}
  ~RouteData() override;
  explicit PROTOBUF_CONSTEXPR RouteData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RouteData(const RouteData& from);
  RouteData(RouteData&& from) noexcept
    : RouteData() {
    *this = ::std::move(from);
  }

  inline RouteData& operator=(const RouteData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteData& operator=(RouteData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RouteData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RouteData* internal_default_instance() {
    return reinterpret_cast<const RouteData*>(
               &_RouteData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RouteData& a, RouteData& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RouteData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RouteData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RouteData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RouteData& from) {
    RouteData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "router_proto.RouteData";
  }
  protected:
  explicit RouteData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopsToIdTransitFieldNumber = 2,
    kEdgeToInfoFieldNumber = 4,
    kGraphFieldNumber = 1,
  };
  // repeated .router_proto.StopsToId stops_to_id_transit = 2;
  int stops_to_id_transit_size() const;
  private:
  int _internal_stops_to_id_transit_size() const;
  public:
  void clear_stops_to_id_transit();
  ::router_proto::StopsToId* mutable_stops_to_id_transit(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router_proto::StopsToId >*
      mutable_stops_to_id_transit();
  private:
  const ::router_proto::StopsToId& _internal_stops_to_id_transit(int index) const;
  ::router_proto::StopsToId* _internal_add_stops_to_id_transit();
  public:
  const ::router_proto::StopsToId& stops_to_id_transit(int index) const;
  ::router_proto::StopsToId* add_stops_to_id_transit();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router_proto::StopsToId >&
      stops_to_id_transit() const;

  // repeated .router_proto.ResponsResult edge_to_info = 4;
  int edge_to_info_size() const;
  private:
  int _internal_edge_to_info_size() const;
  public:
  void clear_edge_to_info();
  ::router_proto::ResponsResult* mutable_edge_to_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router_proto::ResponsResult >*
      mutable_edge_to_info();
  private:
  const ::router_proto::ResponsResult& _internal_edge_to_info(int index) const;
  ::router_proto::ResponsResult* _internal_add_edge_to_info();
  public:
  const ::router_proto::ResponsResult& edge_to_info(int index) const;
  ::router_proto::ResponsResult* add_edge_to_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router_proto::ResponsResult >&
      edge_to_info() const;

  // .graph_proto.DirectedWeightedGraph graph = 1;
  bool has_graph() const;
  private:
  bool _internal_has_graph() const;
  public:
  void clear_graph();
  const ::graph_proto::DirectedWeightedGraph& graph() const;
  PROTOBUF_NODISCARD ::graph_proto::DirectedWeightedGraph* release_graph();
  ::graph_proto::DirectedWeightedGraph* mutable_graph();
  void set_allocated_graph(::graph_proto::DirectedWeightedGraph* graph);
  private:
  const ::graph_proto::DirectedWeightedGraph& _internal_graph() const;
  ::graph_proto::DirectedWeightedGraph* _internal_mutable_graph();
  public:
  void unsafe_arena_set_allocated_graph(
      ::graph_proto::DirectedWeightedGraph* graph);
  ::graph_proto::DirectedWeightedGraph* unsafe_arena_release_graph();

  // @@protoc_insertion_point(class_scope:router_proto.RouteData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router_proto::StopsToId > stops_to_id_transit_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router_proto::ResponsResult > edge_to_info_;
    ::graph_proto::DirectedWeightedGraph* graph_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StopsToId

// string stp_bus = 1;
inline void StopsToId::clear_stp_bus() {
  _impl_.stp_bus_.ClearToEmpty();
}
inline const std::string& StopsToId::stp_bus() const {
  // @@protoc_insertion_point(field_get:router_proto.StopsToId.stp_bus)
  return _internal_stp_bus();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StopsToId::set_stp_bus(ArgT0&& arg0, ArgT... args) {
 
 _impl_.stp_bus_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:router_proto.StopsToId.stp_bus)
}
inline std::string* StopsToId::mutable_stp_bus() {
  std::string* _s = _internal_mutable_stp_bus();
  // @@protoc_insertion_point(field_mutable:router_proto.StopsToId.stp_bus)
  return _s;
}
inline const std::string& StopsToId::_internal_stp_bus() const {
  return _impl_.stp_bus_.Get();
}
inline void StopsToId::_internal_set_stp_bus(const std::string& value) {
  
  _impl_.stp_bus_.Set(value, GetArenaForAllocation());
}
inline std::string* StopsToId::_internal_mutable_stp_bus() {
  
  return _impl_.stp_bus_.Mutable(GetArenaForAllocation());
}
inline std::string* StopsToId::release_stp_bus() {
  // @@protoc_insertion_point(field_release:router_proto.StopsToId.stp_bus)
  return _impl_.stp_bus_.Release();
}
inline void StopsToId::set_allocated_stp_bus(std::string* stp_bus) {
  if (stp_bus != nullptr) {
    
  } else {
    
  }
  _impl_.stp_bus_.SetAllocated(stp_bus, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.stp_bus_.IsDefault()) {
    _impl_.stp_bus_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:router_proto.StopsToId.stp_bus)
}

// int32 stop_id = 2;
inline void StopsToId::clear_stop_id() {
  _impl_.stop_id_ = 0;
}
inline int32_t StopsToId::_internal_stop_id() const {
  return _impl_.stop_id_;
}
inline int32_t StopsToId::stop_id() const {
  // @@protoc_insertion_point(field_get:router_proto.StopsToId.stop_id)
  return _internal_stop_id();
}
inline void StopsToId::_internal_set_stop_id(int32_t value) {
  
  _impl_.stop_id_ = value;
}
inline void StopsToId::set_stop_id(int32_t value) {
  _internal_set_stop_id(value);
  // @@protoc_insertion_point(field_set:router_proto.StopsToId.stop_id)
}

// -------------------------------------------------------------------

// ResponsRouteData

// .router_proto.Type type = 1;
inline void ResponsRouteData::clear_type() {
  _impl_.type_ = 0;
}
inline ::router_proto::Type ResponsRouteData::_internal_type() const {
  return static_cast< ::router_proto::Type >(_impl_.type_);
}
inline ::router_proto::Type ResponsRouteData::type() const {
  // @@protoc_insertion_point(field_get:router_proto.ResponsRouteData.type)
  return _internal_type();
}
inline void ResponsRouteData::_internal_set_type(::router_proto::Type value) {
  
  _impl_.type_ = value;
}
inline void ResponsRouteData::set_type(::router_proto::Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:router_proto.ResponsRouteData.type)
}

// string name = 2;
inline void ResponsRouteData::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ResponsRouteData::name() const {
  // @@protoc_insertion_point(field_get:router_proto.ResponsRouteData.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponsRouteData::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:router_proto.ResponsRouteData.name)
}
inline std::string* ResponsRouteData::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:router_proto.ResponsRouteData.name)
  return _s;
}
inline const std::string& ResponsRouteData::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ResponsRouteData::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ResponsRouteData::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ResponsRouteData::release_name() {
  // @@protoc_insertion_point(field_release:router_proto.ResponsRouteData.name)
  return _impl_.name_.Release();
}
inline void ResponsRouteData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:router_proto.ResponsRouteData.name)
}

// int32 span_count = 3;
inline void ResponsRouteData::clear_span_count() {
  _impl_.span_count_ = 0;
}
inline int32_t ResponsRouteData::_internal_span_count() const {
  return _impl_.span_count_;
}
inline int32_t ResponsRouteData::span_count() const {
  // @@protoc_insertion_point(field_get:router_proto.ResponsRouteData.span_count)
  return _internal_span_count();
}
inline void ResponsRouteData::_internal_set_span_count(int32_t value) {
  
  _impl_.span_count_ = value;
}
inline void ResponsRouteData::set_span_count(int32_t value) {
  _internal_set_span_count(value);
  // @@protoc_insertion_point(field_set:router_proto.ResponsRouteData.span_count)
}

// double time = 4;
inline void ResponsRouteData::clear_time() {
  _impl_.time_ = 0;
}
inline double ResponsRouteData::_internal_time() const {
  return _impl_.time_;
}
inline double ResponsRouteData::time() const {
  // @@protoc_insertion_point(field_get:router_proto.ResponsRouteData.time)
  return _internal_time();
}
inline void ResponsRouteData::_internal_set_time(double value) {
  
  _impl_.time_ = value;
}
inline void ResponsRouteData::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:router_proto.ResponsRouteData.time)
}

// -------------------------------------------------------------------

// ResponsResult

// int32 r_id = 1;
inline void ResponsResult::clear_r_id() {
  _impl_.r_id_ = 0;
}
inline int32_t ResponsResult::_internal_r_id() const {
  return _impl_.r_id_;
}
inline int32_t ResponsResult::r_id() const {
  // @@protoc_insertion_point(field_get:router_proto.ResponsResult.r_id)
  return _internal_r_id();
}
inline void ResponsResult::_internal_set_r_id(int32_t value) {
  
  _impl_.r_id_ = value;
}
inline void ResponsResult::set_r_id(int32_t value) {
  _internal_set_r_id(value);
  // @@protoc_insertion_point(field_set:router_proto.ResponsResult.r_id)
}

// .router_proto.ResponsRouteData data = 2;
inline bool ResponsResult::_internal_has_data() const {
  return this != internal_default_instance() && _impl_.data_ != nullptr;
}
inline bool ResponsResult::has_data() const {
  return _internal_has_data();
}
inline void ResponsResult::clear_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
}
inline const ::router_proto::ResponsRouteData& ResponsResult::_internal_data() const {
  const ::router_proto::ResponsRouteData* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::router_proto::ResponsRouteData&>(
      ::router_proto::_ResponsRouteData_default_instance_);
}
inline const ::router_proto::ResponsRouteData& ResponsResult::data() const {
  // @@protoc_insertion_point(field_get:router_proto.ResponsResult.data)
  return _internal_data();
}
inline void ResponsResult::unsafe_arena_set_allocated_data(
    ::router_proto::ResponsRouteData* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:router_proto.ResponsResult.data)
}
inline ::router_proto::ResponsRouteData* ResponsResult::release_data() {
  
  ::router_proto::ResponsRouteData* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::router_proto::ResponsRouteData* ResponsResult::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:router_proto.ResponsResult.data)
  
  ::router_proto::ResponsRouteData* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::router_proto::ResponsRouteData* ResponsResult::_internal_mutable_data() {
  
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::router_proto::ResponsRouteData>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::router_proto::ResponsRouteData* ResponsResult::mutable_data() {
  ::router_proto::ResponsRouteData* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:router_proto.ResponsResult.data)
  return _msg;
}
inline void ResponsResult::set_allocated_data(::router_proto::ResponsRouteData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:router_proto.ResponsResult.data)
}

// -------------------------------------------------------------------

// RouteData

// .graph_proto.DirectedWeightedGraph graph = 1;
inline bool RouteData::_internal_has_graph() const {
  return this != internal_default_instance() && _impl_.graph_ != nullptr;
}
inline bool RouteData::has_graph() const {
  return _internal_has_graph();
}
inline const ::graph_proto::DirectedWeightedGraph& RouteData::_internal_graph() const {
  const ::graph_proto::DirectedWeightedGraph* p = _impl_.graph_;
  return p != nullptr ? *p : reinterpret_cast<const ::graph_proto::DirectedWeightedGraph&>(
      ::graph_proto::_DirectedWeightedGraph_default_instance_);
}
inline const ::graph_proto::DirectedWeightedGraph& RouteData::graph() const {
  // @@protoc_insertion_point(field_get:router_proto.RouteData.graph)
  return _internal_graph();
}
inline void RouteData::unsafe_arena_set_allocated_graph(
    ::graph_proto::DirectedWeightedGraph* graph) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.graph_);
  }
  _impl_.graph_ = graph;
  if (graph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:router_proto.RouteData.graph)
}
inline ::graph_proto::DirectedWeightedGraph* RouteData::release_graph() {
  
  ::graph_proto::DirectedWeightedGraph* temp = _impl_.graph_;
  _impl_.graph_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::graph_proto::DirectedWeightedGraph* RouteData::unsafe_arena_release_graph() {
  // @@protoc_insertion_point(field_release:router_proto.RouteData.graph)
  
  ::graph_proto::DirectedWeightedGraph* temp = _impl_.graph_;
  _impl_.graph_ = nullptr;
  return temp;
}
inline ::graph_proto::DirectedWeightedGraph* RouteData::_internal_mutable_graph() {
  
  if (_impl_.graph_ == nullptr) {
    auto* p = CreateMaybeMessage<::graph_proto::DirectedWeightedGraph>(GetArenaForAllocation());
    _impl_.graph_ = p;
  }
  return _impl_.graph_;
}
inline ::graph_proto::DirectedWeightedGraph* RouteData::mutable_graph() {
  ::graph_proto::DirectedWeightedGraph* _msg = _internal_mutable_graph();
  // @@protoc_insertion_point(field_mutable:router_proto.RouteData.graph)
  return _msg;
}
inline void RouteData::set_allocated_graph(::graph_proto::DirectedWeightedGraph* graph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.graph_);
  }
  if (graph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph));
    if (message_arena != submessage_arena) {
      graph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.graph_ = graph;
  // @@protoc_insertion_point(field_set_allocated:router_proto.RouteData.graph)
}

// repeated .router_proto.StopsToId stops_to_id_transit = 2;
inline int RouteData::_internal_stops_to_id_transit_size() const {
  return _impl_.stops_to_id_transit_.size();
}
inline int RouteData::stops_to_id_transit_size() const {
  return _internal_stops_to_id_transit_size();
}
inline void RouteData::clear_stops_to_id_transit() {
  _impl_.stops_to_id_transit_.Clear();
}
inline ::router_proto::StopsToId* RouteData::mutable_stops_to_id_transit(int index) {
  // @@protoc_insertion_point(field_mutable:router_proto.RouteData.stops_to_id_transit)
  return _impl_.stops_to_id_transit_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router_proto::StopsToId >*
RouteData::mutable_stops_to_id_transit() {
  // @@protoc_insertion_point(field_mutable_list:router_proto.RouteData.stops_to_id_transit)
  return &_impl_.stops_to_id_transit_;
}
inline const ::router_proto::StopsToId& RouteData::_internal_stops_to_id_transit(int index) const {
  return _impl_.stops_to_id_transit_.Get(index);
}
inline const ::router_proto::StopsToId& RouteData::stops_to_id_transit(int index) const {
  // @@protoc_insertion_point(field_get:router_proto.RouteData.stops_to_id_transit)
  return _internal_stops_to_id_transit(index);
}
inline ::router_proto::StopsToId* RouteData::_internal_add_stops_to_id_transit() {
  return _impl_.stops_to_id_transit_.Add();
}
inline ::router_proto::StopsToId* RouteData::add_stops_to_id_transit() {
  ::router_proto::StopsToId* _add = _internal_add_stops_to_id_transit();
  // @@protoc_insertion_point(field_add:router_proto.RouteData.stops_to_id_transit)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router_proto::StopsToId >&
RouteData::stops_to_id_transit() const {
  // @@protoc_insertion_point(field_list:router_proto.RouteData.stops_to_id_transit)
  return _impl_.stops_to_id_transit_;
}

// repeated .router_proto.ResponsResult edge_to_info = 4;
inline int RouteData::_internal_edge_to_info_size() const {
  return _impl_.edge_to_info_.size();
}
inline int RouteData::edge_to_info_size() const {
  return _internal_edge_to_info_size();
}
inline void RouteData::clear_edge_to_info() {
  _impl_.edge_to_info_.Clear();
}
inline ::router_proto::ResponsResult* RouteData::mutable_edge_to_info(int index) {
  // @@protoc_insertion_point(field_mutable:router_proto.RouteData.edge_to_info)
  return _impl_.edge_to_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router_proto::ResponsResult >*
RouteData::mutable_edge_to_info() {
  // @@protoc_insertion_point(field_mutable_list:router_proto.RouteData.edge_to_info)
  return &_impl_.edge_to_info_;
}
inline const ::router_proto::ResponsResult& RouteData::_internal_edge_to_info(int index) const {
  return _impl_.edge_to_info_.Get(index);
}
inline const ::router_proto::ResponsResult& RouteData::edge_to_info(int index) const {
  // @@protoc_insertion_point(field_get:router_proto.RouteData.edge_to_info)
  return _internal_edge_to_info(index);
}
inline ::router_proto::ResponsResult* RouteData::_internal_add_edge_to_info() {
  return _impl_.edge_to_info_.Add();
}
inline ::router_proto::ResponsResult* RouteData::add_edge_to_info() {
  ::router_proto::ResponsResult* _add = _internal_add_edge_to_info();
  // @@protoc_insertion_point(field_add:router_proto.RouteData.edge_to_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router_proto::ResponsResult >&
RouteData::edge_to_info() const {
  // @@protoc_insertion_point(field_list:router_proto.RouteData.edge_to_info)
  return _impl_.edge_to_info_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace router_proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::router_proto::Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::router_proto::Type>() {
  return ::router_proto::Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5frouter_2eproto
