// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_catalogue.proto

#include "transport_catalogue.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace catalogue_serialize {
PROTOBUF_CONSTEXPR TransportCatalogue::TransportCatalogue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stops_)*/{}
  , /*decltype(_impl_.buses_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TransportCatalogueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransportCatalogueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransportCatalogueDefaultTypeInternal() {}
  union {
    TransportCatalogue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransportCatalogueDefaultTypeInternal _TransportCatalogue_default_instance_;
PROTOBUF_CONSTEXPR FullBase::FullBase(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.transport_catalogue_)*/nullptr
  , /*decltype(_impl_.render_settings_)*/nullptr
  , /*decltype(_impl_.router_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FullBaseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FullBaseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FullBaseDefaultTypeInternal() {}
  union {
    FullBase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FullBaseDefaultTypeInternal _FullBase_default_instance_;
}  // namespace catalogue_serialize
static ::_pb::Metadata file_level_metadata_transport_5fcatalogue_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_transport_5fcatalogue_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_transport_5fcatalogue_2eproto = nullptr;

const uint32_t TableStruct_transport_5fcatalogue_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::catalogue_serialize::TransportCatalogue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::catalogue_serialize::TransportCatalogue, _impl_.stops_),
  PROTOBUF_FIELD_OFFSET(::catalogue_serialize::TransportCatalogue, _impl_.buses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::catalogue_serialize::FullBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::catalogue_serialize::FullBase, _impl_.transport_catalogue_),
  PROTOBUF_FIELD_OFFSET(::catalogue_serialize::FullBase, _impl_.render_settings_),
  PROTOBUF_FIELD_OFFSET(::catalogue_serialize::FullBase, _impl_.router_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::catalogue_serialize::TransportCatalogue)},
  { 8, -1, -1, sizeof(::catalogue_serialize::FullBase)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::catalogue_serialize::_TransportCatalogue_default_instance_._instance,
  &::catalogue_serialize::_FullBase_default_instance_._instance,
};

const char descriptor_table_protodef_transport_5fcatalogue_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031transport_catalogue.proto\022\023catalogue_s"
  "erialize\032\026transport_router.proto\032\022map_re"
  "nderer.proto\032\tsvg.proto\"S\n\022TransportCata"
  "logue\022\036\n\005stops\030\001 \003(\0132\017.proto_svg.Stop\022\035\n"
  "\005buses\030\002 \003(\0132\016.proto_svg.Bus\"\265\001\n\010FullBas"
  "e\022D\n\023transport_catalogue\030\001 \001(\0132\'.catalog"
  "ue_serialize.TransportCatalogue\022:\n\017rende"
  "r_settings\030\002 \001(\0132!.map_render_serialize."
  "MapSettings\022\'\n\006router\030\003 \001(\0132\027.router_pro"
  "to.RouteDatab\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_transport_5fcatalogue_2eproto_deps[3] = {
  &::descriptor_table_map_5frenderer_2eproto,
  &::descriptor_table_svg_2eproto,
  &::descriptor_table_transport_5frouter_2eproto,
};
static ::_pbi::once_flag descriptor_table_transport_5fcatalogue_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_transport_5fcatalogue_2eproto = {
    false, false, 380, descriptor_table_protodef_transport_5fcatalogue_2eproto,
    "transport_catalogue.proto",
    &descriptor_table_transport_5fcatalogue_2eproto_once, descriptor_table_transport_5fcatalogue_2eproto_deps, 3, 2,
    schemas, file_default_instances, TableStruct_transport_5fcatalogue_2eproto::offsets,
    file_level_metadata_transport_5fcatalogue_2eproto, file_level_enum_descriptors_transport_5fcatalogue_2eproto,
    file_level_service_descriptors_transport_5fcatalogue_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_transport_5fcatalogue_2eproto_getter() {
  return &descriptor_table_transport_5fcatalogue_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_transport_5fcatalogue_2eproto(&descriptor_table_transport_5fcatalogue_2eproto);
namespace catalogue_serialize {

// ===================================================================

class TransportCatalogue::_Internal {
 public:
};

void TransportCatalogue::clear_stops() {
  _impl_.stops_.Clear();
}
void TransportCatalogue::clear_buses() {
  _impl_.buses_.Clear();
}
TransportCatalogue::TransportCatalogue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:catalogue_serialize.TransportCatalogue)
}
TransportCatalogue::TransportCatalogue(const TransportCatalogue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransportCatalogue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stops_){from._impl_.stops_}
    , decltype(_impl_.buses_){from._impl_.buses_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:catalogue_serialize.TransportCatalogue)
}

inline void TransportCatalogue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stops_){arena}
    , decltype(_impl_.buses_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TransportCatalogue::~TransportCatalogue() {
  // @@protoc_insertion_point(destructor:catalogue_serialize.TransportCatalogue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransportCatalogue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stops_.~RepeatedPtrField();
  _impl_.buses_.~RepeatedPtrField();
}

void TransportCatalogue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransportCatalogue::Clear() {
// @@protoc_insertion_point(message_clear_start:catalogue_serialize.TransportCatalogue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stops_.Clear();
  _impl_.buses_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransportCatalogue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .proto_svg.Stop stops = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .proto_svg.Bus buses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransportCatalogue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:catalogue_serialize.TransportCatalogue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto_svg.Stop stops = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stops_size()); i < n; i++) {
    const auto& repfield = this->_internal_stops(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .proto_svg.Bus buses = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buses_size()); i < n; i++) {
    const auto& repfield = this->_internal_buses(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:catalogue_serialize.TransportCatalogue)
  return target;
}

size_t TransportCatalogue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:catalogue_serialize.TransportCatalogue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto_svg.Stop stops = 1;
  total_size += 1UL * this->_internal_stops_size();
  for (const auto& msg : this->_impl_.stops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto_svg.Bus buses = 2;
  total_size += 1UL * this->_internal_buses_size();
  for (const auto& msg : this->_impl_.buses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransportCatalogue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransportCatalogue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransportCatalogue::GetClassData() const { return &_class_data_; }


void TransportCatalogue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransportCatalogue*>(&to_msg);
  auto& from = static_cast<const TransportCatalogue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:catalogue_serialize.TransportCatalogue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stops_.MergeFrom(from._impl_.stops_);
  _this->_impl_.buses_.MergeFrom(from._impl_.buses_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransportCatalogue::CopyFrom(const TransportCatalogue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:catalogue_serialize.TransportCatalogue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportCatalogue::IsInitialized() const {
  return true;
}

void TransportCatalogue::InternalSwap(TransportCatalogue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stops_.InternalSwap(&other->_impl_.stops_);
  _impl_.buses_.InternalSwap(&other->_impl_.buses_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransportCatalogue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[0]);
}

// ===================================================================

class FullBase::_Internal {
 public:
  static const ::catalogue_serialize::TransportCatalogue& transport_catalogue(const FullBase* msg);
  static const ::map_render_serialize::MapSettings& render_settings(const FullBase* msg);
  static const ::router_proto::RouteData& router(const FullBase* msg);
};

const ::catalogue_serialize::TransportCatalogue&
FullBase::_Internal::transport_catalogue(const FullBase* msg) {
  return *msg->_impl_.transport_catalogue_;
}
const ::map_render_serialize::MapSettings&
FullBase::_Internal::render_settings(const FullBase* msg) {
  return *msg->_impl_.render_settings_;
}
const ::router_proto::RouteData&
FullBase::_Internal::router(const FullBase* msg) {
  return *msg->_impl_.router_;
}
void FullBase::clear_render_settings() {
  if (GetArenaForAllocation() == nullptr && _impl_.render_settings_ != nullptr) {
    delete _impl_.render_settings_;
  }
  _impl_.render_settings_ = nullptr;
}
void FullBase::clear_router() {
  if (GetArenaForAllocation() == nullptr && _impl_.router_ != nullptr) {
    delete _impl_.router_;
  }
  _impl_.router_ = nullptr;
}
FullBase::FullBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:catalogue_serialize.FullBase)
}
FullBase::FullBase(const FullBase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FullBase* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.transport_catalogue_){nullptr}
    , decltype(_impl_.render_settings_){nullptr}
    , decltype(_impl_.router_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transport_catalogue()) {
    _this->_impl_.transport_catalogue_ = new ::catalogue_serialize::TransportCatalogue(*from._impl_.transport_catalogue_);
  }
  if (from._internal_has_render_settings()) {
    _this->_impl_.render_settings_ = new ::map_render_serialize::MapSettings(*from._impl_.render_settings_);
  }
  if (from._internal_has_router()) {
    _this->_impl_.router_ = new ::router_proto::RouteData(*from._impl_.router_);
  }
  // @@protoc_insertion_point(copy_constructor:catalogue_serialize.FullBase)
}

inline void FullBase::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.transport_catalogue_){nullptr}
    , decltype(_impl_.render_settings_){nullptr}
    , decltype(_impl_.router_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FullBase::~FullBase() {
  // @@protoc_insertion_point(destructor:catalogue_serialize.FullBase)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FullBase::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.transport_catalogue_;
  if (this != internal_default_instance()) delete _impl_.render_settings_;
  if (this != internal_default_instance()) delete _impl_.router_;
}

void FullBase::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FullBase::Clear() {
// @@protoc_insertion_point(message_clear_start:catalogue_serialize.FullBase)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.transport_catalogue_ != nullptr) {
    delete _impl_.transport_catalogue_;
  }
  _impl_.transport_catalogue_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.render_settings_ != nullptr) {
    delete _impl_.render_settings_;
  }
  _impl_.render_settings_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.router_ != nullptr) {
    delete _impl_.router_;
  }
  _impl_.router_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FullBase::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .catalogue_serialize.TransportCatalogue transport_catalogue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transport_catalogue(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .map_render_serialize.MapSettings render_settings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_render_settings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .router_proto.RouteData router = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_router(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FullBase::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:catalogue_serialize.FullBase)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .catalogue_serialize.TransportCatalogue transport_catalogue = 1;
  if (this->_internal_has_transport_catalogue()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::transport_catalogue(this),
        _Internal::transport_catalogue(this).GetCachedSize(), target, stream);
  }

  // .map_render_serialize.MapSettings render_settings = 2;
  if (this->_internal_has_render_settings()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::render_settings(this),
        _Internal::render_settings(this).GetCachedSize(), target, stream);
  }

  // .router_proto.RouteData router = 3;
  if (this->_internal_has_router()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::router(this),
        _Internal::router(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:catalogue_serialize.FullBase)
  return target;
}

size_t FullBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:catalogue_serialize.FullBase)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .catalogue_serialize.TransportCatalogue transport_catalogue = 1;
  if (this->_internal_has_transport_catalogue()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.transport_catalogue_);
  }

  // .map_render_serialize.MapSettings render_settings = 2;
  if (this->_internal_has_render_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.render_settings_);
  }

  // .router_proto.RouteData router = 3;
  if (this->_internal_has_router()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.router_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FullBase::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FullBase::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FullBase::GetClassData() const { return &_class_data_; }


void FullBase::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FullBase*>(&to_msg);
  auto& from = static_cast<const FullBase&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:catalogue_serialize.FullBase)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_transport_catalogue()) {
    _this->_internal_mutable_transport_catalogue()->::catalogue_serialize::TransportCatalogue::MergeFrom(
        from._internal_transport_catalogue());
  }
  if (from._internal_has_render_settings()) {
    _this->_internal_mutable_render_settings()->::map_render_serialize::MapSettings::MergeFrom(
        from._internal_render_settings());
  }
  if (from._internal_has_router()) {
    _this->_internal_mutable_router()->::router_proto::RouteData::MergeFrom(
        from._internal_router());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FullBase::CopyFrom(const FullBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:catalogue_serialize.FullBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullBase::IsInitialized() const {
  return true;
}

void FullBase::InternalSwap(FullBase* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FullBase, _impl_.router_)
      + sizeof(FullBase::_impl_.router_)
      - PROTOBUF_FIELD_OFFSET(FullBase, _impl_.transport_catalogue_)>(
          reinterpret_cast<char*>(&_impl_.transport_catalogue_),
          reinterpret_cast<char*>(&other->_impl_.transport_catalogue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FullBase::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace catalogue_serialize
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::catalogue_serialize::TransportCatalogue*
Arena::CreateMaybeMessage< ::catalogue_serialize::TransportCatalogue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::catalogue_serialize::TransportCatalogue >(arena);
}
template<> PROTOBUF_NOINLINE ::catalogue_serialize::FullBase*
Arena::CreateMaybeMessage< ::catalogue_serialize::FullBase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::catalogue_serialize::FullBase >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
