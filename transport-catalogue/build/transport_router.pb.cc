// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_router.proto

#include "transport_router.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace router_proto {
PROTOBUF_CONSTEXPR StopsToId::StopsToId(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stp_bus_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stop_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StopsToIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopsToIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopsToIdDefaultTypeInternal() {}
  union {
    StopsToId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopsToIdDefaultTypeInternal _StopsToId_default_instance_;
PROTOBUF_CONSTEXPR ResponsRouteData::ResponsRouteData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.span_count_)*/0
  , /*decltype(_impl_.time_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResponsRouteDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponsRouteDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponsRouteDataDefaultTypeInternal() {}
  union {
    ResponsRouteData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponsRouteDataDefaultTypeInternal _ResponsRouteData_default_instance_;
PROTOBUF_CONSTEXPR ResponsResult::ResponsResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.r_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResponsResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponsResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponsResultDefaultTypeInternal() {}
  union {
    ResponsResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponsResultDefaultTypeInternal _ResponsResult_default_instance_;
PROTOBUF_CONSTEXPR RouteData::RouteData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stops_to_id_transit_)*/{}
  , /*decltype(_impl_.edge_to_info_)*/{}
  , /*decltype(_impl_.graph_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RouteDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RouteDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RouteDataDefaultTypeInternal() {}
  union {
    RouteData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RouteDataDefaultTypeInternal _RouteData_default_instance_;
}  // namespace router_proto
static ::_pb::Metadata file_level_metadata_transport_5frouter_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_transport_5frouter_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_transport_5frouter_2eproto = nullptr;

const uint32_t TableStruct_transport_5frouter_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::router_proto::StopsToId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::router_proto::StopsToId, _impl_.stp_bus_),
  PROTOBUF_FIELD_OFFSET(::router_proto::StopsToId, _impl_.stop_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::router_proto::ResponsRouteData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::router_proto::ResponsRouteData, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::router_proto::ResponsRouteData, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::router_proto::ResponsRouteData, _impl_.span_count_),
  PROTOBUF_FIELD_OFFSET(::router_proto::ResponsRouteData, _impl_.time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::router_proto::ResponsResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::router_proto::ResponsResult, _impl_.r_id_),
  PROTOBUF_FIELD_OFFSET(::router_proto::ResponsResult, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::router_proto::RouteData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::router_proto::RouteData, _impl_.graph_),
  PROTOBUF_FIELD_OFFSET(::router_proto::RouteData, _impl_.stops_to_id_transit_),
  PROTOBUF_FIELD_OFFSET(::router_proto::RouteData, _impl_.edge_to_info_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::router_proto::StopsToId)},
  { 8, -1, -1, sizeof(::router_proto::ResponsRouteData)},
  { 18, -1, -1, sizeof(::router_proto::ResponsResult)},
  { 26, -1, -1, sizeof(::router_proto::RouteData)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::router_proto::_StopsToId_default_instance_._instance,
  &::router_proto::_ResponsRouteData_default_instance_._instance,
  &::router_proto::_ResponsResult_default_instance_._instance,
  &::router_proto::_RouteData_default_instance_._instance,
};

const char descriptor_table_protodef_transport_5frouter_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026transport_router.proto\022\014router_proto\032\013"
  "graph.proto\"-\n\tStopsToId\022\017\n\007stp_bus\030\001 \001("
  "\t\022\017\n\007stop_id\030\002 \001(\005\"d\n\020ResponsRouteData\022 "
  "\n\004type\030\001 \001(\0162\022.router_proto.Type\022\014\n\004name"
  "\030\002 \001(\t\022\022\n\nspan_count\030\003 \001(\005\022\014\n\004time\030\004 \001(\001"
  "\"K\n\rResponsResult\022\014\n\004r_id\030\001 \001(\005\022,\n\004data\030"
  "\002 \001(\0132\036.router_proto.ResponsRouteData\"\247\001"
  "\n\tRouteData\0221\n\005graph\030\001 \001(\0132\".graph_proto"
  ".DirectedWeightedGraph\0224\n\023stops_to_id_tr"
  "ansit\030\002 \003(\0132\027.router_proto.StopsToId\0221\n\014"
  "edge_to_info\030\003 \003(\0132\033.router_proto.Respon"
  "sResult*#\n\004Type\022\r\n\tTYPE_WAIT\020\000\022\014\n\010TYPE_B"
  "US\020\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_transport_5frouter_2eproto_deps[1] = {
  &::descriptor_table_graph_2eproto,
};
static ::_pbi::once_flag descriptor_table_transport_5frouter_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_transport_5frouter_2eproto = {
    false, false, 492, descriptor_table_protodef_transport_5frouter_2eproto,
    "transport_router.proto",
    &descriptor_table_transport_5frouter_2eproto_once, descriptor_table_transport_5frouter_2eproto_deps, 1, 4,
    schemas, file_default_instances, TableStruct_transport_5frouter_2eproto::offsets,
    file_level_metadata_transport_5frouter_2eproto, file_level_enum_descriptors_transport_5frouter_2eproto,
    file_level_service_descriptors_transport_5frouter_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_transport_5frouter_2eproto_getter() {
  return &descriptor_table_transport_5frouter_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_transport_5frouter_2eproto(&descriptor_table_transport_5frouter_2eproto);
namespace router_proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_transport_5frouter_2eproto);
  return file_level_enum_descriptors_transport_5frouter_2eproto[0];
}
bool Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class StopsToId::_Internal {
 public:
};

StopsToId::StopsToId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:router_proto.StopsToId)
}
StopsToId::StopsToId(const StopsToId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StopsToId* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stp_bus_){}
    , decltype(_impl_.stop_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.stp_bus_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stp_bus_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stp_bus().empty()) {
    _this->_impl_.stp_bus_.Set(from._internal_stp_bus(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.stop_id_ = from._impl_.stop_id_;
  // @@protoc_insertion_point(copy_constructor:router_proto.StopsToId)
}

inline void StopsToId::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stp_bus_){}
    , decltype(_impl_.stop_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.stp_bus_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stp_bus_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StopsToId::~StopsToId() {
  // @@protoc_insertion_point(destructor:router_proto.StopsToId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StopsToId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stp_bus_.Destroy();
}

void StopsToId::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StopsToId::Clear() {
// @@protoc_insertion_point(message_clear_start:router_proto.StopsToId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stp_bus_.ClearToEmpty();
  _impl_.stop_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopsToId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string stp_bus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_stp_bus();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "router_proto.StopsToId.stp_bus"));
        } else
          goto handle_unusual;
        continue;
      // int32 stop_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.stop_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StopsToId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:router_proto.StopsToId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string stp_bus = 1;
  if (!this->_internal_stp_bus().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stp_bus().data(), static_cast<int>(this->_internal_stp_bus().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "router_proto.StopsToId.stp_bus");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stp_bus(), target);
  }

  // int32 stop_id = 2;
  if (this->_internal_stop_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_stop_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:router_proto.StopsToId)
  return target;
}

size_t StopsToId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:router_proto.StopsToId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stp_bus = 1;
  if (!this->_internal_stp_bus().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stp_bus());
  }

  // int32 stop_id = 2;
  if (this->_internal_stop_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stop_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopsToId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StopsToId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopsToId::GetClassData() const { return &_class_data_; }


void StopsToId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StopsToId*>(&to_msg);
  auto& from = static_cast<const StopsToId&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:router_proto.StopsToId)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_stp_bus().empty()) {
    _this->_internal_set_stp_bus(from._internal_stp_bus());
  }
  if (from._internal_stop_id() != 0) {
    _this->_internal_set_stop_id(from._internal_stop_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopsToId::CopyFrom(const StopsToId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:router_proto.StopsToId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopsToId::IsInitialized() const {
  return true;
}

void StopsToId::InternalSwap(StopsToId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stp_bus_, lhs_arena,
      &other->_impl_.stp_bus_, rhs_arena
  );
  swap(_impl_.stop_id_, other->_impl_.stop_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopsToId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5frouter_2eproto_getter, &descriptor_table_transport_5frouter_2eproto_once,
      file_level_metadata_transport_5frouter_2eproto[0]);
}

// ===================================================================

class ResponsRouteData::_Internal {
 public:
};

ResponsRouteData::ResponsRouteData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:router_proto.ResponsRouteData)
}
ResponsRouteData::ResponsRouteData(const ResponsRouteData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponsRouteData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.span_count_){}
    , decltype(_impl_.time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.time_));
  // @@protoc_insertion_point(copy_constructor:router_proto.ResponsRouteData)
}

inline void ResponsRouteData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.span_count_){0}
    , decltype(_impl_.time_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResponsRouteData::~ResponsRouteData() {
  // @@protoc_insertion_point(destructor:router_proto.ResponsRouteData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponsRouteData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void ResponsRouteData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponsRouteData::Clear() {
// @@protoc_insertion_point(message_clear_start:router_proto.ResponsRouteData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.time_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponsRouteData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .router_proto.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::router_proto::Type>(val));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "router_proto.ResponsRouteData.name"));
        } else
          goto handle_unusual;
        continue;
      // int32 span_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.span_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponsRouteData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:router_proto.ResponsRouteData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .router_proto.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "router_proto.ResponsRouteData.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 span_count = 3;
  if (this->_internal_span_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_span_count(), target);
  }

  // double time = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time = this->_internal_time();
  uint64_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:router_proto.ResponsRouteData)
  return target;
}

size_t ResponsRouteData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:router_proto.ResponsRouteData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .router_proto.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 span_count = 3;
  if (this->_internal_span_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_span_count());
  }

  // double time = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time = this->_internal_time();
  uint64_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponsRouteData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponsRouteData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponsRouteData::GetClassData() const { return &_class_data_; }


void ResponsRouteData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponsRouteData*>(&to_msg);
  auto& from = static_cast<const ResponsRouteData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:router_proto.ResponsRouteData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_span_count() != 0) {
    _this->_internal_set_span_count(from._internal_span_count());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time = from._internal_time();
  uint64_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponsRouteData::CopyFrom(const ResponsRouteData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:router_proto.ResponsRouteData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponsRouteData::IsInitialized() const {
  return true;
}

void ResponsRouteData::InternalSwap(ResponsRouteData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponsRouteData, _impl_.time_)
      + sizeof(ResponsRouteData::_impl_.time_)
      - PROTOBUF_FIELD_OFFSET(ResponsRouteData, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponsRouteData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5frouter_2eproto_getter, &descriptor_table_transport_5frouter_2eproto_once,
      file_level_metadata_transport_5frouter_2eproto[1]);
}

// ===================================================================

class ResponsResult::_Internal {
 public:
  static const ::router_proto::ResponsRouteData& data(const ResponsResult* msg);
};

const ::router_proto::ResponsRouteData&
ResponsResult::_Internal::data(const ResponsResult* msg) {
  return *msg->_impl_.data_;
}
ResponsResult::ResponsResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:router_proto.ResponsResult)
}
ResponsResult::ResponsResult(const ResponsResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponsResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , decltype(_impl_.r_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::router_proto::ResponsRouteData(*from._impl_.data_);
  }
  _this->_impl_.r_id_ = from._impl_.r_id_;
  // @@protoc_insertion_point(copy_constructor:router_proto.ResponsResult)
}

inline void ResponsResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , decltype(_impl_.r_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ResponsResult::~ResponsResult() {
  // @@protoc_insertion_point(destructor:router_proto.ResponsResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponsResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
}

void ResponsResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponsResult::Clear() {
// @@protoc_insertion_point(message_clear_start:router_proto.ResponsResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  _impl_.r_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponsResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 r_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.r_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .router_proto.ResponsRouteData data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponsResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:router_proto.ResponsResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 r_id = 1;
  if (this->_internal_r_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_r_id(), target);
  }

  // .router_proto.ResponsRouteData data = 2;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:router_proto.ResponsResult)
  return target;
}

size_t ResponsResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:router_proto.ResponsResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .router_proto.ResponsRouteData data = 2;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  // int32 r_id = 1;
  if (this->_internal_r_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_r_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponsResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponsResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponsResult::GetClassData() const { return &_class_data_; }


void ResponsResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponsResult*>(&to_msg);
  auto& from = static_cast<const ResponsResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:router_proto.ResponsResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::router_proto::ResponsRouteData::MergeFrom(
        from._internal_data());
  }
  if (from._internal_r_id() != 0) {
    _this->_internal_set_r_id(from._internal_r_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponsResult::CopyFrom(const ResponsResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:router_proto.ResponsResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponsResult::IsInitialized() const {
  return true;
}

void ResponsResult::InternalSwap(ResponsResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponsResult, _impl_.r_id_)
      + sizeof(ResponsResult::_impl_.r_id_)
      - PROTOBUF_FIELD_OFFSET(ResponsResult, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponsResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5frouter_2eproto_getter, &descriptor_table_transport_5frouter_2eproto_once,
      file_level_metadata_transport_5frouter_2eproto[2]);
}

// ===================================================================

class RouteData::_Internal {
 public:
  static const ::graph_proto::DirectedWeightedGraph& graph(const RouteData* msg);
};

const ::graph_proto::DirectedWeightedGraph&
RouteData::_Internal::graph(const RouteData* msg) {
  return *msg->_impl_.graph_;
}
void RouteData::clear_graph() {
  if (GetArenaForAllocation() == nullptr && _impl_.graph_ != nullptr) {
    delete _impl_.graph_;
  }
  _impl_.graph_ = nullptr;
}
RouteData::RouteData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:router_proto.RouteData)
}
RouteData::RouteData(const RouteData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RouteData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stops_to_id_transit_){from._impl_.stops_to_id_transit_}
    , decltype(_impl_.edge_to_info_){from._impl_.edge_to_info_}
    , decltype(_impl_.graph_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_graph()) {
    _this->_impl_.graph_ = new ::graph_proto::DirectedWeightedGraph(*from._impl_.graph_);
  }
  // @@protoc_insertion_point(copy_constructor:router_proto.RouteData)
}

inline void RouteData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stops_to_id_transit_){arena}
    , decltype(_impl_.edge_to_info_){arena}
    , decltype(_impl_.graph_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RouteData::~RouteData() {
  // @@protoc_insertion_point(destructor:router_proto.RouteData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RouteData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stops_to_id_transit_.~RepeatedPtrField();
  _impl_.edge_to_info_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.graph_;
}

void RouteData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RouteData::Clear() {
// @@protoc_insertion_point(message_clear_start:router_proto.RouteData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stops_to_id_transit_.Clear();
  _impl_.edge_to_info_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.graph_ != nullptr) {
    delete _impl_.graph_;
  }
  _impl_.graph_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .graph_proto.DirectedWeightedGraph graph = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_graph(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .router_proto.StopsToId stops_to_id_transit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stops_to_id_transit(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .router_proto.ResponsResult edge_to_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edge_to_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RouteData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:router_proto.RouteData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .graph_proto.DirectedWeightedGraph graph = 1;
  if (this->_internal_has_graph()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::graph(this),
        _Internal::graph(this).GetCachedSize(), target, stream);
  }

  // repeated .router_proto.StopsToId stops_to_id_transit = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stops_to_id_transit_size()); i < n; i++) {
    const auto& repfield = this->_internal_stops_to_id_transit(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .router_proto.ResponsResult edge_to_info = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_edge_to_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_edge_to_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:router_proto.RouteData)
  return target;
}

size_t RouteData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:router_proto.RouteData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .router_proto.StopsToId stops_to_id_transit = 2;
  total_size += 1UL * this->_internal_stops_to_id_transit_size();
  for (const auto& msg : this->_impl_.stops_to_id_transit_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .router_proto.ResponsResult edge_to_info = 3;
  total_size += 1UL * this->_internal_edge_to_info_size();
  for (const auto& msg : this->_impl_.edge_to_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .graph_proto.DirectedWeightedGraph graph = 1;
  if (this->_internal_has_graph()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.graph_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouteData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RouteData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouteData::GetClassData() const { return &_class_data_; }


void RouteData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RouteData*>(&to_msg);
  auto& from = static_cast<const RouteData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:router_proto.RouteData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stops_to_id_transit_.MergeFrom(from._impl_.stops_to_id_transit_);
  _this->_impl_.edge_to_info_.MergeFrom(from._impl_.edge_to_info_);
  if (from._internal_has_graph()) {
    _this->_internal_mutable_graph()->::graph_proto::DirectedWeightedGraph::MergeFrom(
        from._internal_graph());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouteData::CopyFrom(const RouteData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:router_proto.RouteData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteData::IsInitialized() const {
  return true;
}

void RouteData::InternalSwap(RouteData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stops_to_id_transit_.InternalSwap(&other->_impl_.stops_to_id_transit_);
  _impl_.edge_to_info_.InternalSwap(&other->_impl_.edge_to_info_);
  swap(_impl_.graph_, other->_impl_.graph_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5frouter_2eproto_getter, &descriptor_table_transport_5frouter_2eproto_once,
      file_level_metadata_transport_5frouter_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace router_proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::router_proto::StopsToId*
Arena::CreateMaybeMessage< ::router_proto::StopsToId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::router_proto::StopsToId >(arena);
}
template<> PROTOBUF_NOINLINE ::router_proto::ResponsRouteData*
Arena::CreateMaybeMessage< ::router_proto::ResponsRouteData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::router_proto::ResponsRouteData >(arena);
}
template<> PROTOBUF_NOINLINE ::router_proto::ResponsResult*
Arena::CreateMaybeMessage< ::router_proto::ResponsResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::router_proto::ResponsResult >(arena);
}
template<> PROTOBUF_NOINLINE ::router_proto::RouteData*
Arena::CreateMaybeMessage< ::router_proto::RouteData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::router_proto::RouteData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
