// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: svg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_svg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_svg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_svg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_svg_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_svg_2eproto;
namespace proto_svg {
class Bus;
struct BusDefaultTypeInternal;
extern BusDefaultTypeInternal _Bus_default_instance_;
class Stop;
struct StopDefaultTypeInternal;
extern StopDefaultTypeInternal _Stop_default_instance_;
class Stop_DistanceEntry_DoNotUse;
struct Stop_DistanceEntry_DoNotUseDefaultTypeInternal;
extern Stop_DistanceEntry_DoNotUseDefaultTypeInternal _Stop_DistanceEntry_DoNotUse_default_instance_;
}  // namespace proto_svg
PROTOBUF_NAMESPACE_OPEN
template<> ::proto_svg::Bus* Arena::CreateMaybeMessage<::proto_svg::Bus>(Arena*);
template<> ::proto_svg::Stop* Arena::CreateMaybeMessage<::proto_svg::Stop>(Arena*);
template<> ::proto_svg::Stop_DistanceEntry_DoNotUse* Arena::CreateMaybeMessage<::proto_svg::Stop_DistanceEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto_svg {

// ===================================================================

class Stop_DistanceEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Stop_DistanceEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Stop_DistanceEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  Stop_DistanceEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Stop_DistanceEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Stop_DistanceEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Stop_DistanceEntry_DoNotUse& other);
  static const Stop_DistanceEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Stop_DistanceEntry_DoNotUse*>(&_Stop_DistanceEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "proto_svg.Stop.DistanceEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_svg_2eproto;
};

// -------------------------------------------------------------------

class Stop final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_svg.Stop) */ {
 public:
  inline Stop() : Stop(nullptr) {}
  ~Stop() override;
  explicit PROTOBUF_CONSTEXPR Stop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stop(const Stop& from);
  Stop(Stop&& from) noexcept
    : Stop() {
    *this = ::std::move(from);
  }

  inline Stop& operator=(const Stop& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stop& operator=(Stop&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Stop& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stop* internal_default_instance() {
    return reinterpret_cast<const Stop*>(
               &_Stop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Stop& a, Stop& b) {
    a.Swap(&b);
  }
  inline void Swap(Stop* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Stop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Stop>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Stop& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Stop& from) {
    Stop::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stop* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_svg.Stop";
  }
  protected:
  explicit Stop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDistanceFieldNumber = 4,
    kStopNameFieldNumber = 1,
    kLatitudeFieldNumber = 2,
    kLongitudeFieldNumber = 3,
  };
  // map<string, int32> distance = 4;
  int distance_size() const;
  private:
  int _internal_distance_size() const;
  public:
  void clear_distance();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      _internal_distance() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      _internal_mutable_distance();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      distance() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      mutable_distance();

  // string stop_name = 1;
  void clear_stop_name();
  const std::string& stop_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stop_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stop_name();
  PROTOBUF_NODISCARD std::string* release_stop_name();
  void set_allocated_stop_name(std::string* stop_name);
  private:
  const std::string& _internal_stop_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stop_name(const std::string& value);
  std::string* _internal_mutable_stop_name();
  public:

  // double latitude = 2;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 3;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // @@protoc_insertion_point(class_scope:proto_svg.Stop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Stop_DistanceEntry_DoNotUse,
        std::string, int32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> distance_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stop_name_;
    double latitude_;
    double longitude_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_svg_2eproto;
};
// -------------------------------------------------------------------

class Bus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_svg.Bus) */ {
 public:
  inline Bus() : Bus(nullptr) {}
  ~Bus() override;
  explicit PROTOBUF_CONSTEXPR Bus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bus(const Bus& from);
  Bus(Bus&& from) noexcept
    : Bus() {
    *this = ::std::move(from);
  }

  inline Bus& operator=(const Bus& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bus& operator=(Bus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bus& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bus* internal_default_instance() {
    return reinterpret_cast<const Bus*>(
               &_Bus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Bus& a, Bus& b) {
    a.Swap(&b);
  }
  inline void Swap(Bus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Bus& from) {
    Bus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_svg.Bus";
  }
  protected:
  explicit Bus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRouteFieldNumber = 2,
    kBusNameFieldNumber = 1,
    kIsRouteRoundFieldNumber = 3,
  };
  // repeated string route = 2;
  int route_size() const;
  private:
  int _internal_route_size() const;
  public:
  void clear_route();
  const std::string& route(int index) const;
  std::string* mutable_route(int index);
  void set_route(int index, const std::string& value);
  void set_route(int index, std::string&& value);
  void set_route(int index, const char* value);
  void set_route(int index, const char* value, size_t size);
  std::string* add_route();
  void add_route(const std::string& value);
  void add_route(std::string&& value);
  void add_route(const char* value);
  void add_route(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& route() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_route();
  private:
  const std::string& _internal_route(int index) const;
  std::string* _internal_add_route();
  public:

  // string bus_name = 1;
  void clear_bus_name();
  const std::string& bus_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bus_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bus_name();
  PROTOBUF_NODISCARD std::string* release_bus_name();
  void set_allocated_bus_name(std::string* bus_name);
  private:
  const std::string& _internal_bus_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bus_name(const std::string& value);
  std::string* _internal_mutable_bus_name();
  public:

  // bool is_route_round = 3;
  void clear_is_route_round();
  bool is_route_round() const;
  void set_is_route_round(bool value);
  private:
  bool _internal_is_route_round() const;
  void _internal_set_is_route_round(bool value);
  public:

  // @@protoc_insertion_point(class_scope:proto_svg.Bus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> route_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bus_name_;
    bool is_route_round_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_svg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Stop

// string stop_name = 1;
inline void Stop::clear_stop_name() {
  _impl_.stop_name_.ClearToEmpty();
}
inline const std::string& Stop::stop_name() const {
  // @@protoc_insertion_point(field_get:proto_svg.Stop.stop_name)
  return _internal_stop_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Stop::set_stop_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.stop_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_svg.Stop.stop_name)
}
inline std::string* Stop::mutable_stop_name() {
  std::string* _s = _internal_mutable_stop_name();
  // @@protoc_insertion_point(field_mutable:proto_svg.Stop.stop_name)
  return _s;
}
inline const std::string& Stop::_internal_stop_name() const {
  return _impl_.stop_name_.Get();
}
inline void Stop::_internal_set_stop_name(const std::string& value) {
  
  _impl_.stop_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Stop::_internal_mutable_stop_name() {
  
  return _impl_.stop_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Stop::release_stop_name() {
  // @@protoc_insertion_point(field_release:proto_svg.Stop.stop_name)
  return _impl_.stop_name_.Release();
}
inline void Stop::set_allocated_stop_name(std::string* stop_name) {
  if (stop_name != nullptr) {
    
  } else {
    
  }
  _impl_.stop_name_.SetAllocated(stop_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.stop_name_.IsDefault()) {
    _impl_.stop_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_svg.Stop.stop_name)
}

// double latitude = 2;
inline void Stop::clear_latitude() {
  _impl_.latitude_ = 0;
}
inline double Stop::_internal_latitude() const {
  return _impl_.latitude_;
}
inline double Stop::latitude() const {
  // @@protoc_insertion_point(field_get:proto_svg.Stop.latitude)
  return _internal_latitude();
}
inline void Stop::_internal_set_latitude(double value) {
  
  _impl_.latitude_ = value;
}
inline void Stop::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:proto_svg.Stop.latitude)
}

// double longitude = 3;
inline void Stop::clear_longitude() {
  _impl_.longitude_ = 0;
}
inline double Stop::_internal_longitude() const {
  return _impl_.longitude_;
}
inline double Stop::longitude() const {
  // @@protoc_insertion_point(field_get:proto_svg.Stop.longitude)
  return _internal_longitude();
}
inline void Stop::_internal_set_longitude(double value) {
  
  _impl_.longitude_ = value;
}
inline void Stop::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:proto_svg.Stop.longitude)
}

// map<string, int32> distance = 4;
inline int Stop::_internal_distance_size() const {
  return _impl_.distance_.size();
}
inline int Stop::distance_size() const {
  return _internal_distance_size();
}
inline void Stop::clear_distance() {
  _impl_.distance_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
Stop::_internal_distance() const {
  return _impl_.distance_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
Stop::distance() const {
  // @@protoc_insertion_point(field_map:proto_svg.Stop.distance)
  return _internal_distance();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
Stop::_internal_mutable_distance() {
  return _impl_.distance_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
Stop::mutable_distance() {
  // @@protoc_insertion_point(field_mutable_map:proto_svg.Stop.distance)
  return _internal_mutable_distance();
}

// -------------------------------------------------------------------

// Bus

// string bus_name = 1;
inline void Bus::clear_bus_name() {
  _impl_.bus_name_.ClearToEmpty();
}
inline const std::string& Bus::bus_name() const {
  // @@protoc_insertion_point(field_get:proto_svg.Bus.bus_name)
  return _internal_bus_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Bus::set_bus_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bus_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_svg.Bus.bus_name)
}
inline std::string* Bus::mutable_bus_name() {
  std::string* _s = _internal_mutable_bus_name();
  // @@protoc_insertion_point(field_mutable:proto_svg.Bus.bus_name)
  return _s;
}
inline const std::string& Bus::_internal_bus_name() const {
  return _impl_.bus_name_.Get();
}
inline void Bus::_internal_set_bus_name(const std::string& value) {
  
  _impl_.bus_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Bus::_internal_mutable_bus_name() {
  
  return _impl_.bus_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Bus::release_bus_name() {
  // @@protoc_insertion_point(field_release:proto_svg.Bus.bus_name)
  return _impl_.bus_name_.Release();
}
inline void Bus::set_allocated_bus_name(std::string* bus_name) {
  if (bus_name != nullptr) {
    
  } else {
    
  }
  _impl_.bus_name_.SetAllocated(bus_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bus_name_.IsDefault()) {
    _impl_.bus_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_svg.Bus.bus_name)
}

// repeated string route = 2;
inline int Bus::_internal_route_size() const {
  return _impl_.route_.size();
}
inline int Bus::route_size() const {
  return _internal_route_size();
}
inline void Bus::clear_route() {
  _impl_.route_.Clear();
}
inline std::string* Bus::add_route() {
  std::string* _s = _internal_add_route();
  // @@protoc_insertion_point(field_add_mutable:proto_svg.Bus.route)
  return _s;
}
inline const std::string& Bus::_internal_route(int index) const {
  return _impl_.route_.Get(index);
}
inline const std::string& Bus::route(int index) const {
  // @@protoc_insertion_point(field_get:proto_svg.Bus.route)
  return _internal_route(index);
}
inline std::string* Bus::mutable_route(int index) {
  // @@protoc_insertion_point(field_mutable:proto_svg.Bus.route)
  return _impl_.route_.Mutable(index);
}
inline void Bus::set_route(int index, const std::string& value) {
  _impl_.route_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:proto_svg.Bus.route)
}
inline void Bus::set_route(int index, std::string&& value) {
  _impl_.route_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:proto_svg.Bus.route)
}
inline void Bus::set_route(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.route_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto_svg.Bus.route)
}
inline void Bus::set_route(int index, const char* value, size_t size) {
  _impl_.route_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto_svg.Bus.route)
}
inline std::string* Bus::_internal_add_route() {
  return _impl_.route_.Add();
}
inline void Bus::add_route(const std::string& value) {
  _impl_.route_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto_svg.Bus.route)
}
inline void Bus::add_route(std::string&& value) {
  _impl_.route_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto_svg.Bus.route)
}
inline void Bus::add_route(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.route_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto_svg.Bus.route)
}
inline void Bus::add_route(const char* value, size_t size) {
  _impl_.route_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto_svg.Bus.route)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Bus::route() const {
  // @@protoc_insertion_point(field_list:proto_svg.Bus.route)
  return _impl_.route_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Bus::mutable_route() {
  // @@protoc_insertion_point(field_mutable_list:proto_svg.Bus.route)
  return &_impl_.route_;
}

// bool is_route_round = 3;
inline void Bus::clear_is_route_round() {
  _impl_.is_route_round_ = false;
}
inline bool Bus::_internal_is_route_round() const {
  return _impl_.is_route_round_;
}
inline bool Bus::is_route_round() const {
  // @@protoc_insertion_point(field_get:proto_svg.Bus.is_route_round)
  return _internal_is_route_round();
}
inline void Bus::_internal_set_is_route_round(bool value) {
  
  _impl_.is_route_round_ = value;
}
inline void Bus::set_is_route_round(bool value) {
  _internal_set_is_route_round(value);
  // @@protoc_insertion_point(field_set:proto_svg.Bus.is_route_round)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_svg

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_svg_2eproto
