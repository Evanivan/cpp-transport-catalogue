// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_catalogue.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "transport_router.pb.h"
#include "map_renderer.pb.h"
#include "svg.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5fcatalogue_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5fcatalogue_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5fcatalogue_2eproto;
namespace catalogue_serialize {
class FullBase;
struct FullBaseDefaultTypeInternal;
extern FullBaseDefaultTypeInternal _FullBase_default_instance_;
class TransportCatalogue;
struct TransportCatalogueDefaultTypeInternal;
extern TransportCatalogueDefaultTypeInternal _TransportCatalogue_default_instance_;
}  // namespace catalogue_serialize
PROTOBUF_NAMESPACE_OPEN
template<> ::catalogue_serialize::FullBase* Arena::CreateMaybeMessage<::catalogue_serialize::FullBase>(Arena*);
template<> ::catalogue_serialize::TransportCatalogue* Arena::CreateMaybeMessage<::catalogue_serialize::TransportCatalogue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace catalogue_serialize {

// ===================================================================

class TransportCatalogue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:catalogue_serialize.TransportCatalogue) */ {
 public:
  inline TransportCatalogue() : TransportCatalogue(nullptr) {}
  ~TransportCatalogue() override;
  explicit PROTOBUF_CONSTEXPR TransportCatalogue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransportCatalogue(const TransportCatalogue& from);
  TransportCatalogue(TransportCatalogue&& from) noexcept
    : TransportCatalogue() {
    *this = ::std::move(from);
  }

  inline TransportCatalogue& operator=(const TransportCatalogue& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransportCatalogue& operator=(TransportCatalogue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransportCatalogue& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransportCatalogue* internal_default_instance() {
    return reinterpret_cast<const TransportCatalogue*>(
               &_TransportCatalogue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TransportCatalogue& a, TransportCatalogue& b) {
    a.Swap(&b);
  }
  inline void Swap(TransportCatalogue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransportCatalogue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransportCatalogue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransportCatalogue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransportCatalogue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransportCatalogue& from) {
    TransportCatalogue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportCatalogue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "catalogue_serialize.TransportCatalogue";
  }
  protected:
  explicit TransportCatalogue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopsFieldNumber = 1,
    kBusesFieldNumber = 2,
  };
  // repeated .proto_svg.Stop stops = 1;
  int stops_size() const;
  private:
  int _internal_stops_size() const;
  public:
  void clear_stops();
  ::proto_svg::Stop* mutable_stops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_svg::Stop >*
      mutable_stops();
  private:
  const ::proto_svg::Stop& _internal_stops(int index) const;
  ::proto_svg::Stop* _internal_add_stops();
  public:
  const ::proto_svg::Stop& stops(int index) const;
  ::proto_svg::Stop* add_stops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_svg::Stop >&
      stops() const;

  // repeated .proto_svg.Bus buses = 2;
  int buses_size() const;
  private:
  int _internal_buses_size() const;
  public:
  void clear_buses();
  ::proto_svg::Bus* mutable_buses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_svg::Bus >*
      mutable_buses();
  private:
  const ::proto_svg::Bus& _internal_buses(int index) const;
  ::proto_svg::Bus* _internal_add_buses();
  public:
  const ::proto_svg::Bus& buses(int index) const;
  ::proto_svg::Bus* add_buses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_svg::Bus >&
      buses() const;

  // @@protoc_insertion_point(class_scope:catalogue_serialize.TransportCatalogue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_svg::Stop > stops_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_svg::Bus > buses_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class FullBase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:catalogue_serialize.FullBase) */ {
 public:
  inline FullBase() : FullBase(nullptr) {}
  ~FullBase() override;
  explicit PROTOBUF_CONSTEXPR FullBase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FullBase(const FullBase& from);
  FullBase(FullBase&& from) noexcept
    : FullBase() {
    *this = ::std::move(from);
  }

  inline FullBase& operator=(const FullBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline FullBase& operator=(FullBase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FullBase& default_instance() {
    return *internal_default_instance();
  }
  static inline const FullBase* internal_default_instance() {
    return reinterpret_cast<const FullBase*>(
               &_FullBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FullBase& a, FullBase& b) {
    a.Swap(&b);
  }
  inline void Swap(FullBase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FullBase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FullBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FullBase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FullBase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FullBase& from) {
    FullBase::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FullBase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "catalogue_serialize.FullBase";
  }
  protected:
  explicit FullBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransportCatalogueFieldNumber = 1,
    kRenderSettingsFieldNumber = 2,
    kRouterFieldNumber = 3,
  };
  // .catalogue_serialize.TransportCatalogue transport_catalogue = 1;
  bool has_transport_catalogue() const;
  private:
  bool _internal_has_transport_catalogue() const;
  public:
  void clear_transport_catalogue();
  const ::catalogue_serialize::TransportCatalogue& transport_catalogue() const;
  PROTOBUF_NODISCARD ::catalogue_serialize::TransportCatalogue* release_transport_catalogue();
  ::catalogue_serialize::TransportCatalogue* mutable_transport_catalogue();
  void set_allocated_transport_catalogue(::catalogue_serialize::TransportCatalogue* transport_catalogue);
  private:
  const ::catalogue_serialize::TransportCatalogue& _internal_transport_catalogue() const;
  ::catalogue_serialize::TransportCatalogue* _internal_mutable_transport_catalogue();
  public:
  void unsafe_arena_set_allocated_transport_catalogue(
      ::catalogue_serialize::TransportCatalogue* transport_catalogue);
  ::catalogue_serialize::TransportCatalogue* unsafe_arena_release_transport_catalogue();

  // .map_render_serialize.MapSettings render_settings = 2;
  bool has_render_settings() const;
  private:
  bool _internal_has_render_settings() const;
  public:
  void clear_render_settings();
  const ::map_render_serialize::MapSettings& render_settings() const;
  PROTOBUF_NODISCARD ::map_render_serialize::MapSettings* release_render_settings();
  ::map_render_serialize::MapSettings* mutable_render_settings();
  void set_allocated_render_settings(::map_render_serialize::MapSettings* render_settings);
  private:
  const ::map_render_serialize::MapSettings& _internal_render_settings() const;
  ::map_render_serialize::MapSettings* _internal_mutable_render_settings();
  public:
  void unsafe_arena_set_allocated_render_settings(
      ::map_render_serialize::MapSettings* render_settings);
  ::map_render_serialize::MapSettings* unsafe_arena_release_render_settings();

  // .router_proto.RouteData router = 3;
  bool has_router() const;
  private:
  bool _internal_has_router() const;
  public:
  void clear_router();
  const ::router_proto::RouteData& router() const;
  PROTOBUF_NODISCARD ::router_proto::RouteData* release_router();
  ::router_proto::RouteData* mutable_router();
  void set_allocated_router(::router_proto::RouteData* router);
  private:
  const ::router_proto::RouteData& _internal_router() const;
  ::router_proto::RouteData* _internal_mutable_router();
  public:
  void unsafe_arena_set_allocated_router(
      ::router_proto::RouteData* router);
  ::router_proto::RouteData* unsafe_arena_release_router();

  // @@protoc_insertion_point(class_scope:catalogue_serialize.FullBase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::catalogue_serialize::TransportCatalogue* transport_catalogue_;
    ::map_render_serialize::MapSettings* render_settings_;
    ::router_proto::RouteData* router_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TransportCatalogue

// repeated .proto_svg.Stop stops = 1;
inline int TransportCatalogue::_internal_stops_size() const {
  return _impl_.stops_.size();
}
inline int TransportCatalogue::stops_size() const {
  return _internal_stops_size();
}
inline ::proto_svg::Stop* TransportCatalogue::mutable_stops(int index) {
  // @@protoc_insertion_point(field_mutable:catalogue_serialize.TransportCatalogue.stops)
  return _impl_.stops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_svg::Stop >*
TransportCatalogue::mutable_stops() {
  // @@protoc_insertion_point(field_mutable_list:catalogue_serialize.TransportCatalogue.stops)
  return &_impl_.stops_;
}
inline const ::proto_svg::Stop& TransportCatalogue::_internal_stops(int index) const {
  return _impl_.stops_.Get(index);
}
inline const ::proto_svg::Stop& TransportCatalogue::stops(int index) const {
  // @@protoc_insertion_point(field_get:catalogue_serialize.TransportCatalogue.stops)
  return _internal_stops(index);
}
inline ::proto_svg::Stop* TransportCatalogue::_internal_add_stops() {
  return _impl_.stops_.Add();
}
inline ::proto_svg::Stop* TransportCatalogue::add_stops() {
  ::proto_svg::Stop* _add = _internal_add_stops();
  // @@protoc_insertion_point(field_add:catalogue_serialize.TransportCatalogue.stops)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_svg::Stop >&
TransportCatalogue::stops() const {
  // @@protoc_insertion_point(field_list:catalogue_serialize.TransportCatalogue.stops)
  return _impl_.stops_;
}

// repeated .proto_svg.Bus buses = 2;
inline int TransportCatalogue::_internal_buses_size() const {
  return _impl_.buses_.size();
}
inline int TransportCatalogue::buses_size() const {
  return _internal_buses_size();
}
inline ::proto_svg::Bus* TransportCatalogue::mutable_buses(int index) {
  // @@protoc_insertion_point(field_mutable:catalogue_serialize.TransportCatalogue.buses)
  return _impl_.buses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_svg::Bus >*
TransportCatalogue::mutable_buses() {
  // @@protoc_insertion_point(field_mutable_list:catalogue_serialize.TransportCatalogue.buses)
  return &_impl_.buses_;
}
inline const ::proto_svg::Bus& TransportCatalogue::_internal_buses(int index) const {
  return _impl_.buses_.Get(index);
}
inline const ::proto_svg::Bus& TransportCatalogue::buses(int index) const {
  // @@protoc_insertion_point(field_get:catalogue_serialize.TransportCatalogue.buses)
  return _internal_buses(index);
}
inline ::proto_svg::Bus* TransportCatalogue::_internal_add_buses() {
  return _impl_.buses_.Add();
}
inline ::proto_svg::Bus* TransportCatalogue::add_buses() {
  ::proto_svg::Bus* _add = _internal_add_buses();
  // @@protoc_insertion_point(field_add:catalogue_serialize.TransportCatalogue.buses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_svg::Bus >&
TransportCatalogue::buses() const {
  // @@protoc_insertion_point(field_list:catalogue_serialize.TransportCatalogue.buses)
  return _impl_.buses_;
}

// -------------------------------------------------------------------

// FullBase

// .catalogue_serialize.TransportCatalogue transport_catalogue = 1;
inline bool FullBase::_internal_has_transport_catalogue() const {
  return this != internal_default_instance() && _impl_.transport_catalogue_ != nullptr;
}
inline bool FullBase::has_transport_catalogue() const {
  return _internal_has_transport_catalogue();
}
inline void FullBase::clear_transport_catalogue() {
  if (GetArenaForAllocation() == nullptr && _impl_.transport_catalogue_ != nullptr) {
    delete _impl_.transport_catalogue_;
  }
  _impl_.transport_catalogue_ = nullptr;
}
inline const ::catalogue_serialize::TransportCatalogue& FullBase::_internal_transport_catalogue() const {
  const ::catalogue_serialize::TransportCatalogue* p = _impl_.transport_catalogue_;
  return p != nullptr ? *p : reinterpret_cast<const ::catalogue_serialize::TransportCatalogue&>(
      ::catalogue_serialize::_TransportCatalogue_default_instance_);
}
inline const ::catalogue_serialize::TransportCatalogue& FullBase::transport_catalogue() const {
  // @@protoc_insertion_point(field_get:catalogue_serialize.FullBase.transport_catalogue)
  return _internal_transport_catalogue();
}
inline void FullBase::unsafe_arena_set_allocated_transport_catalogue(
    ::catalogue_serialize::TransportCatalogue* transport_catalogue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transport_catalogue_);
  }
  _impl_.transport_catalogue_ = transport_catalogue;
  if (transport_catalogue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:catalogue_serialize.FullBase.transport_catalogue)
}
inline ::catalogue_serialize::TransportCatalogue* FullBase::release_transport_catalogue() {
  
  ::catalogue_serialize::TransportCatalogue* temp = _impl_.transport_catalogue_;
  _impl_.transport_catalogue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::catalogue_serialize::TransportCatalogue* FullBase::unsafe_arena_release_transport_catalogue() {
  // @@protoc_insertion_point(field_release:catalogue_serialize.FullBase.transport_catalogue)
  
  ::catalogue_serialize::TransportCatalogue* temp = _impl_.transport_catalogue_;
  _impl_.transport_catalogue_ = nullptr;
  return temp;
}
inline ::catalogue_serialize::TransportCatalogue* FullBase::_internal_mutable_transport_catalogue() {
  
  if (_impl_.transport_catalogue_ == nullptr) {
    auto* p = CreateMaybeMessage<::catalogue_serialize::TransportCatalogue>(GetArenaForAllocation());
    _impl_.transport_catalogue_ = p;
  }
  return _impl_.transport_catalogue_;
}
inline ::catalogue_serialize::TransportCatalogue* FullBase::mutable_transport_catalogue() {
  ::catalogue_serialize::TransportCatalogue* _msg = _internal_mutable_transport_catalogue();
  // @@protoc_insertion_point(field_mutable:catalogue_serialize.FullBase.transport_catalogue)
  return _msg;
}
inline void FullBase::set_allocated_transport_catalogue(::catalogue_serialize::TransportCatalogue* transport_catalogue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.transport_catalogue_;
  }
  if (transport_catalogue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(transport_catalogue);
    if (message_arena != submessage_arena) {
      transport_catalogue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transport_catalogue, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.transport_catalogue_ = transport_catalogue;
  // @@protoc_insertion_point(field_set_allocated:catalogue_serialize.FullBase.transport_catalogue)
}

// .map_render_serialize.MapSettings render_settings = 2;
inline bool FullBase::_internal_has_render_settings() const {
  return this != internal_default_instance() && _impl_.render_settings_ != nullptr;
}
inline bool FullBase::has_render_settings() const {
  return _internal_has_render_settings();
}
inline const ::map_render_serialize::MapSettings& FullBase::_internal_render_settings() const {
  const ::map_render_serialize::MapSettings* p = _impl_.render_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::map_render_serialize::MapSettings&>(
      ::map_render_serialize::_MapSettings_default_instance_);
}
inline const ::map_render_serialize::MapSettings& FullBase::render_settings() const {
  // @@protoc_insertion_point(field_get:catalogue_serialize.FullBase.render_settings)
  return _internal_render_settings();
}
inline void FullBase::unsafe_arena_set_allocated_render_settings(
    ::map_render_serialize::MapSettings* render_settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.render_settings_);
  }
  _impl_.render_settings_ = render_settings;
  if (render_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:catalogue_serialize.FullBase.render_settings)
}
inline ::map_render_serialize::MapSettings* FullBase::release_render_settings() {
  
  ::map_render_serialize::MapSettings* temp = _impl_.render_settings_;
  _impl_.render_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::map_render_serialize::MapSettings* FullBase::unsafe_arena_release_render_settings() {
  // @@protoc_insertion_point(field_release:catalogue_serialize.FullBase.render_settings)
  
  ::map_render_serialize::MapSettings* temp = _impl_.render_settings_;
  _impl_.render_settings_ = nullptr;
  return temp;
}
inline ::map_render_serialize::MapSettings* FullBase::_internal_mutable_render_settings() {
  
  if (_impl_.render_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::map_render_serialize::MapSettings>(GetArenaForAllocation());
    _impl_.render_settings_ = p;
  }
  return _impl_.render_settings_;
}
inline ::map_render_serialize::MapSettings* FullBase::mutable_render_settings() {
  ::map_render_serialize::MapSettings* _msg = _internal_mutable_render_settings();
  // @@protoc_insertion_point(field_mutable:catalogue_serialize.FullBase.render_settings)
  return _msg;
}
inline void FullBase::set_allocated_render_settings(::map_render_serialize::MapSettings* render_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.render_settings_);
  }
  if (render_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(render_settings));
    if (message_arena != submessage_arena) {
      render_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, render_settings, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.render_settings_ = render_settings;
  // @@protoc_insertion_point(field_set_allocated:catalogue_serialize.FullBase.render_settings)
}

// .router_proto.RouteData router = 3;
inline bool FullBase::_internal_has_router() const {
  return this != internal_default_instance() && _impl_.router_ != nullptr;
}
inline bool FullBase::has_router() const {
  return _internal_has_router();
}
inline const ::router_proto::RouteData& FullBase::_internal_router() const {
  const ::router_proto::RouteData* p = _impl_.router_;
  return p != nullptr ? *p : reinterpret_cast<const ::router_proto::RouteData&>(
      ::router_proto::_RouteData_default_instance_);
}
inline const ::router_proto::RouteData& FullBase::router() const {
  // @@protoc_insertion_point(field_get:catalogue_serialize.FullBase.router)
  return _internal_router();
}
inline void FullBase::unsafe_arena_set_allocated_router(
    ::router_proto::RouteData* router) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.router_);
  }
  _impl_.router_ = router;
  if (router) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:catalogue_serialize.FullBase.router)
}
inline ::router_proto::RouteData* FullBase::release_router() {
  
  ::router_proto::RouteData* temp = _impl_.router_;
  _impl_.router_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::router_proto::RouteData* FullBase::unsafe_arena_release_router() {
  // @@protoc_insertion_point(field_release:catalogue_serialize.FullBase.router)
  
  ::router_proto::RouteData* temp = _impl_.router_;
  _impl_.router_ = nullptr;
  return temp;
}
inline ::router_proto::RouteData* FullBase::_internal_mutable_router() {
  
  if (_impl_.router_ == nullptr) {
    auto* p = CreateMaybeMessage<::router_proto::RouteData>(GetArenaForAllocation());
    _impl_.router_ = p;
  }
  return _impl_.router_;
}
inline ::router_proto::RouteData* FullBase::mutable_router() {
  ::router_proto::RouteData* _msg = _internal_mutable_router();
  // @@protoc_insertion_point(field_mutable:catalogue_serialize.FullBase.router)
  return _msg;
}
inline void FullBase::set_allocated_router(::router_proto::RouteData* router) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.router_);
  }
  if (router) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(router));
    if (message_arena != submessage_arena) {
      router = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, router, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.router_ = router;
  // @@protoc_insertion_point(field_set_allocated:catalogue_serialize.FullBase.router)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace catalogue_serialize

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
